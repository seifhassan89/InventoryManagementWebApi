// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(StocksDB))]
    [Migration("20230302113103_intialDB")]
    partial class intialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MeasuringUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ItemId");

                    b.HasIndex("MeasuringUnitId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Models.MeasuringUnit", b =>
                {
                    b.Property<int>("MeasuringUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MeasuringUnitId");

                    b.ToTable("MeasuringUnits");
                });

            modelBuilder.Entity("Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StockFromId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StockToId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("StockFromId");

                    b.HasIndex("StockToId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Models.RequestItem", b =>
                {
                    b.Property<int>("RequestItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("RequestItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestItems");
                });

            modelBuilder.Entity("Models.RequestType", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            RequestTypeId = 1,
                            Name = "Supply Request"
                        },
                        new
                        {
                            RequestTypeId = 2,
                            Name = "Withdraw Request"
                        });
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Supplier"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Client"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Manger"
                        });
                });

            modelBuilder.Entity("Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MangerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StockId");

                    b.HasIndex("MangerId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Models.StockItem", b =>
                {
                    b.Property<int>("StockItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("StockItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("StockId");

                    b.ToTable("StockItems");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Item", b =>
                {
                    b.HasOne("Models.MeasuringUnit", "MeasuringUnit")
                        .WithMany("Items")
                        .HasForeignKey("MeasuringUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasuringUnit");
                });

            modelBuilder.Entity("Models.Request", b =>
                {
                    b.HasOne("Models.RequestType", "RequestType")
                        .WithMany("Requests")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Stock", "StockFrom")
                        .WithMany("WithdrawRequests")
                        .HasForeignKey("StockFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Stock", "StockTo")
                        .WithMany("SupplyRequests")
                        .HasForeignKey("StockToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestType");

                    b.Navigation("StockFrom");

                    b.Navigation("StockTo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.RequestItem", b =>
                {
                    b.HasOne("Models.Item", "Item")
                        .WithMany("RequestItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Request", "Request")
                        .WithMany("RequestItems")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Models.Stock", b =>
                {
                    b.HasOne("Models.User", "Manger")
                        .WithMany("Stocks")
                        .HasForeignKey("MangerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manger");
                });

            modelBuilder.Entity("Models.StockItem", b =>
                {
                    b.HasOne("Models.Item", "Item")
                        .WithMany("StockItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Stock", "Stock")
                        .WithMany("StockItems")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Models.Item", b =>
                {
                    b.Navigation("RequestItems");

                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("Models.MeasuringUnit", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Models.Request", b =>
                {
                    b.Navigation("RequestItems");
                });

            modelBuilder.Entity("Models.RequestType", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Stock", b =>
                {
                    b.Navigation("StockItems");

                    b.Navigation("SupplyRequests");

                    b.Navigation("WithdrawRequests");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("Stocks");

                    b.Navigation("requests");
                });
#pragma warning restore 612, 618
        }
    }
}
